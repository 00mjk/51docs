#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil 
#+CATEGORY: programming
#+TAGS: bash, shell
#+PERMALINK: bash-shell-notes
#+TITLE: bash学习笔记

工作中用bash写脚本的情况不少，不过很多时候都是不求甚解，拿来主义。

几个月后，我又要写新的脚本，遗憾的是我连个if测试都忘记如何写了。重新查找资料的时候，我开始反思，为什么我没能记住这貌似简单的bash语法。

#+HTML: <!--more--> 

* 走过的弯路

有以下三种学习bash shell的方法：
 1. 用到才学，遇到问题就上谷歌搜
 2. 看书。比如：《高级 Bash 脚本编程指南》
 3. 用linux系统自带的手册比如man，help等

一直以来我都是用第一种：遇到问题了，从网上找到一段shell代码，复制粘帖，再根据我对其它编程语言（比如C）的理解来修改代码，屡试不爽。好像这样就足够了，甚至没有发现我不懂这门语言。

若干个月后，当我再次想写点代码的时候，我发现它很陌生，就连最简单的 *if* 不会写，对于 *if* 的理解还停留在C语言的世界里。我开始意识到我根本就没有正真会过。于是我觉得应该系统地学习它，我找到一本书——《高级 Bash 脚本编程指南》，一本内容丰富全面的书。不幸的是这本书太大了，然后就没有然后了。

又过了若干个月，当我再次想写点代码的时候，我发现它还是很陌生，本来记住的 *if* 用法，又给忘记了。这次我觉得linux系统本身就应该有足够的文档。我试了一下命令 *help* ，真的有东西出来：
: GNU bash, version 4.2.10(1)-release (i686-pc-linux-gnu)
: These shell commands are defined internally.  Type `help' to see this list.
: Type `help name' to find out more about the function `name'.
: Use `info bash' to find out more about the shell in general.
: Use `man -k' or `info' to find out more about commands not in this list.
: 
: A star (*) next to a name means that the command is disabled.
: 
:  job_spec [&]                                             history [-c] [-d offset] [n] or history -anrw [filena>
:  (( expression ))                                         if COMMANDS; then COMMANDS; [ elif COMMANDS; then COM>
:  . filename [arguments]                                   jobs [-lnprs] [jobspec ...] or jobs -x command [args]>
:  :                                                        kill [-s sigspec | -n signum | -sigspec] pid | jobspe>
:  [ arg... ]                                               let arg [arg ...]
:  [[ expression ]]                                         local [option] name[=value] ...
:  alias [-p] [name[=value] ... ]                           logout [n]

然后 *help if* 能够看到 *if* 的基本用法：

最后用 *man bash* 能够看到bash的一个简单的手册。

我觉得现在第三种方法最适合我，

#+begin_quote
转载请注明出处：[[http://www.wuyao721.com/bash-shell-notes.html]]
#+end_quote
