#+BLOG: wuyao721
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil 
#+CATEGORY: 
#+TAGS: bash, shell
#+PERMALINK: bash-intro
#+TITLE: bash脚本简介

bash是linux平台常用的脚本工具。这里简单介绍了bash脚本的基本知识，以及常见用法。

#+html: <!--more--> 

* 变量

** 变量名和变量值
: a=123              #将123的值传给A
: b=$a               #将A的值传给B
: echo a             #输出字母A
: echo $a            #输出变量A的值
: echo ${a}          #与上的同样，{}号将变量名括起来

** 特殊变量

| $0    | 运行脚本的名字                                   |
| $1    | 脚本的第一个参数                                 |
| $2    | 脚本的第二个参数，以此类推。                     |
| ${10} | 脚本的第十个参数，必须用括号括起来。以此类推。   |
| $$    | 脚本运行时的进程ID值。                           |
| $?    | 上一个命令，函数或者者脚本的退出状态码的值。     |
| $*    | 所有的参数。                                     |
| $@    | 和$*一样，但是每个参数都是用引号引起来的字符串。 |
| $#    | 脚本参数的个数                                   |

: #!/bin/bash
: # arglist.sh
: # 用几个参数来运行这个脚本,比如说"one two three".
: 
: E_BADARGS=65
: 
: if [ ! -n "$1" ]
: then
:   echo "Usage: `basename $0` argument1 argument2 etc."
:   exit $E_BADARGS
: fi  
: 
: echo
: 
: index=1          # 初始计数.
: 
: echo "Listing args with \"\$*\":"
: for arg in "$*"  # 如果"$*"没有被引号引起来，会完全不能工作.
: do
:   echo "Arg #$index = $arg"
:   let "index+=1"
: done             # $* sees all arguments as single word. 
: echo "Entire arg list seen as single word."
: 
: echo
: 
: index=1          # Reset count.
:                  # What happens if you forget to do this?
: 
: echo "Listing args with \"\$@\":"
: for arg in "$@"
: do
:   echo "Arg #$index = $arg"
:   let "index+=1"
: done             # $@ sees arguments as separate words. 
: echo "Arg list seen as separate words."
: 
: echo
: 
: index=1          # Reset count.
: 
: echo "Listing args with \$* (unquoted):"
: for arg in $*
: do
:   echo "Arg #$index = $arg"
:   let "index+=1"
: done             # Unquoted $* sees arguments as separate words. 
: echo "Arg list seen as separate words."
: 
: exit 0

* 正则表达式

** 标准正则表达式
      | 符号       | 含义                                     |
      |------------+------------------------------------------|
      | =*=        | 匹配前一个字符的任意多次（包括零次）     |
      | =.=        | 匹配除新行符之外的任意一个字符           |
      | =^=        | 匹配一行的开头，或者表示一个字符集的补集 |
      | =$=        | 匹配一行的结束                           |
      | =\=        | 转义字符，使被转义的字符表示字面上的意思 |
      | =[]=       | 在表示匹配括号中的一个字符               |
      | =[xyz]=    | 匹配字符x,y,z中的任意一个，依此类推      |
      | =[c-n]=    | 匹配字符c到n之间的任意一个，依此类推     |
      | =[B-Pk-y]= | 匹配字符c到n或k到y的任意一个，依此类推   |
      | =[a-z0-9]= | 匹配任意小写字母或数字，依此类推         |
      | =[^b-d]=   | 匹配除了c到n之间的任意一个字符，依此类推 |

*** 例子

#+begin_example
bash$ cat textfile
This is line 1, of which there is only one instance.
This is the only instance of line 2.
This is line 3, another line.
This is line 4.
 
bash$ grep 'the' textfile
This is line 1, of which there is only one instance.
This is the only instance of line 2.
This is line 3, another line.

bash$ grep '\<the\>' textfile
This is the only instance of line 2.
#+end_example

** 扩展的正则表达式 [1]

扩展的正则表达式，增加了一些元字符到上的提到的基本元字符集合中，它们在egrep, awk和perl中使用：

    | 符号 | 含义                                                                    |
    |------+-------------------------------------------------------------------------|
    | =?=  | 匹配零或一个前面的字符，它一般用于匹配单个字符                          |
    | =+=  | 匹配一个或者前面多个字符，与*很相似，唯一的区别是它不匹配零个字符的情况 |
    | =\{= | 指示前面正则表达式匹配的次数，和“\}”一起使用。[2]                     |
    | =\}= | 指示前面正则表达式匹配的次数，和“\{”一起使用。                        |
    | =()= | 指示前面正则表达式匹配的次数，和“\{”一起使用。                        |

可以被转义的字符包括：
: \ * ? + $ ^ < > { }

* 参考资料
 - 高级Bash脚本编程指南

#+begin_quote
转载请注明出处：[[http://www.wuyao721.com/bash-intro.html]]
#+end_quote
